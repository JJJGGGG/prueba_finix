// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test_finix.Services;

#nullable disable

namespace test_finix.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250418162806_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("test_finix.Models.Customer", b =>
                {
                    b.Property<string>("customer_run")
                        .HasColumnType("TEXT");

                    b.Property<string>("customer_email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("customer_run");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("test_finix.Models.Invoice", b =>
                {
                    b.Property<int>("invoice_number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("customer_run")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("days_to_due")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("invoice_date")
                        .HasColumnType("TEXT");

                    b.Property<int>("invoice_detailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("invoice_status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("payment_due_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("payment_status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("total_amount")
                        .HasColumnType("INTEGER");

                    b.HasKey("invoice_number");

                    b.HasIndex("customer_run");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("test_finix.Models.InvoiceCreditNote", b =>
                {
                    b.Property<int>("credit_note_number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("credit_note_amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("credit_note_date")
                        .HasColumnType("TEXT");

                    b.Property<int>("invoiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("credit_note_number");

                    b.HasIndex("invoiceId");

                    b.ToTable("invoice_credit_notes");
                });

            modelBuilder.Entity("test_finix.Models.InvoicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("invoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("payment_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("payment_method")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("invoiceId")
                        .IsUnique();

                    b.ToTable("invoice_payments");
                });

            modelBuilder.Entity("test_finix.Models.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("invoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("subtotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("unit_price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("invoiceId");

                    b.ToTable("product_details");
                });

            modelBuilder.Entity("test_finix.Models.Invoice", b =>
                {
                    b.HasOne("test_finix.Models.Customer", "customer")
                        .WithMany("invoices")
                        .HasForeignKey("customer_run")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("test_finix.Models.InvoiceCreditNote", b =>
                {
                    b.HasOne("test_finix.Models.Invoice", "invoice")
                        .WithMany("invoice_credit_note")
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("test_finix.Models.InvoicePayment", b =>
                {
                    b.HasOne("test_finix.Models.Invoice", "invoice")
                        .WithOne("invoice_payment")
                        .HasForeignKey("test_finix.Models.InvoicePayment", "invoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("test_finix.Models.ProductDetail", b =>
                {
                    b.HasOne("test_finix.Models.Invoice", "invoice")
                        .WithMany("invoice_detail")
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("test_finix.Models.Customer", b =>
                {
                    b.Navigation("invoices");
                });

            modelBuilder.Entity("test_finix.Models.Invoice", b =>
                {
                    b.Navigation("invoice_credit_note");

                    b.Navigation("invoice_detail");

                    b.Navigation("invoice_payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
